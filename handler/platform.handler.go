package handler

// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: platform.proto_platform
// File Location: handler/Platform.handler.go

import  (
	pb "github.com/zokypesch/prakerja-examplegen/grpc/pb/platform"
	"context"
	empty "github.com/golang/protobuf/ptypes/empty"
	validator "github.com/go-playground/validator"
	domain "github.com/zokypesch/prakerja-examplegen/platform"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)
type Platform struct{
	svc *domain.PlatformService
	validate *validator.Validate
}

func NewPlatform(svc *domain.PlatformService) *Platform {
	validate := validator.New()
	return &Platform{svc, validate}
}
// Create method declare by generated code
func (handler *Platform) Create(ctx context.Context, in *pb.Platform) (*pb.ResponseCreatePlatform, error) {
	model := domain.Platform{}
	model.Id = in.Id
	model.Name = in.Name
	model.Email = in.Email

	if err := handler.validate.Struct(model); err != nil {
		return &pb.ResponseCreatePlatform{}, status.Errorf(codes.PermissionDenied, err.Error())
	}
	return handler.svc.Create(ctx, in)
}
// Get method declare by generated code
func (handler *Platform) Get(ctx context.Context, in *empty.Empty) (*pb.ResponseCreatePlatform, error) {
	return handler.svc.Get(ctx, in)
}


