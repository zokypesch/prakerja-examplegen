package platform

// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: platform.proto_platform
// File Location: Platform.repository.go

import (
	"github.com/jinzhu/gorm"
) 

// Platform for struct info
type PlatformRepository struct {
	db *gorm.DB
}

// PlatformRepoService for interfacing repository
type PlatformRepoService interface {
	GetById(payload *Platform) (*Platform, error)
	GetAll(payload *Platform) ([]Platform, error)
	Create(payload *Platform) (*Platform, error)
	Update(payload *Platform) (*Platform, error)
	Delete(payload *Platform) (*Platform, error)
}

// Platform for repository singleton
var platformRepo PlatformRepoService

// NewPlatformRepoService for new repository service
func NewPlatformRepoService(db *gorm.DB) PlatformRepoService {
	if platformRepo == nil {
		platformRepo = &PlatformRepository{
			db,
		}
	}
	return platformRepo
}

// GetById for get by primarykey
func (repo *PlatformRepository) GetById(payload *Platform) (*Platform, error) {
	var data Platform
	db := repo.db.Where("id = ?", payload.Id).Find(&data)

	return &data, db.Error
}

// GetAll for get all from table
func (repo *PlatformRepository) GetAll(payload *Platform) ([]Platform, error) {
	limit := 1000
	page := 1
	offset := (int(page) - 1) * limit

	var data []Platform
	db := repo.db.Where(payload).Offset(offset).Limit(limit).Find(&data)

	return data, db.Error

}

// Create for create database
func (repo *PlatformRepository) Create(payload *Platform) (*Platform, error) {
	err := repo.db.Create(payload).Error

	return payload, err
}

// Update for update data
func (repo *PlatformRepository) Update(payload *Platform) (*Platform, error) {
	err := repo.db.Model(&Platform{Id: payload.Id}).Update(payload).Error

	return payload, err
}

// Delete for delete data
func (repo *PlatformRepository) Delete(payload *Platform) (*Platform, error) {
	err := repo.db.Delete(Platform{}, "id = ?", payload.Id).Error

	return payload, err
}




