package platform

// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: platform.proto_platform
// File Location: handler/Platform.service.go

import  (
	pb "github.com/zokypesch/prakerja-examplegen/grpc/pb/platform"
	"context"
	// "fmt"
	empty "github.com/golang/protobuf/ptypes/empty"
	ptypes "github.com/golang/protobuf/ptypes"
)
type PlatformService struct{
	repo *MasterRepository
	
}

// PlatformSvc for service singleton
var PlatformSvc *PlatformService

// NewPlatformService for new repository service

func NewPlatformService(repo *MasterRepository) *PlatformService {
	if PlatformSvc == nil {
		PlatformSvc = &PlatformService{
			repo,
		}
	}
	return PlatformSvc
}
// Create method declare by generated code
func (svc *PlatformService) Create(ctx context.Context, in *pb.Platform) (*pb.ResponseCreatePlatform, error) {
	model := &Platform{}
	model.Id = in.Id
	model.Name = in.Name
	model.Email = in.Email
	model.CreatedBy = in.CreatedBy
	timeCreatedAt, errTimeCreatedAt := ptypes.Timestamp(in.CreatedAt)

	if errTimeCreatedAt == nil {
		model.CreatedAt = timeCreatedAt
	}
	res, err := svc.repo.Platform.Create(model)

	resp := &pb.ResponseCreatePlatform{}
	resp.Id = res.Id
	resp.Name = res.Name
	resp.Email = res.Email
	protoTimeRespCreatedAt, errProtoTimeRespCreatedAt := ptypes.TimestampProto(res.CreatedAt)

	if errProtoTimeRespCreatedAt == nil {
		resp.CreatedAt = protoTimeRespCreatedAt
	}
	return resp, err
}
// Get method declare by generated code
func (svc *PlatformService) Get(ctx context.Context, in *empty.Empty) (*pb.ResponseCreatePlatform, error) {
	return &pb.ResponseCreatePlatform{}, nil
}


